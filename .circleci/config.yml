version: 2.1
# Use a package of configuration called an orb.
orbs:
  # Choose either one of the orbs below
  # Declare a dependency on the welcome-orb
  # welcome: circleci/welcome-orb@0.4.1
  aws-cli: circleci/aws-cli@2.0.3

commands: # command to roll back depployment once it fails
  destroy_environments:
    steps:
      - run:
         name: Destroy Environments
         # ${CIRCLE_WORKFLOW_ID} is a Built-in environment variable 
         # ${CIRCLE_WORKFLOW_ID:0:5} takes the first 5 chars of the variable CIRCLE_CI_WORKFLOW_ID 
         when: on_fail
         command: |
           aws cloudformation delete-stack --stack-name myStack-${CIRCLE_WORKFLOW_ID:0:7}



jobs:

  # create_infrastructure: # A job that creates an infrastructure stack with an EC3 running in the stack
  #   docker:
  #     - image: amazon/aws-cli
  #   steps:
  #     - checkout
  #     - run:
  #         name: Create Cloudformation Stack
  #         command: |
  #           aws cloudformation deploy \
  #             --template-file template.yml \
  #             --stack-name myStack-${CIRCLE_WORKFLOW_ID:0:5} \
  #             --region us-east-1
      # Fail the job intentionally to simulate an error.
      # Uncomment the line below if you want to fail the current step
      # - run: return 1
      
  # configure_infrastructure:   # A job that installs ansible on an EC2
  #   docker:
  #     - image: python:3.7-alpine3.11
  #   steps:
  #     - checkout
  #     - add_ssh_keys:
  #         fingerprints: ["15:80:c2:21:d0:9b:be:52:ea:d9:d1:81:15:2f:a4:94"] # You can get this ID in the section where you registered the SSH Key
  #     - run:
  #         name: Install dependencies
  #         command: |
  #           # install the dependencies needed for your playbook
  #           apk add --update ansible 
  #     - run:
  #         name: Configure server
  #         command: |
  #           ansible-playbook -i inventory main.yaml


  # smoke_test: # A smoke test that performs an error check if the website is running or not. if the website isnt runnning the pipeline fails
  #   docker:
  #     - image: alpine:latest
  #   steps:
  #     - run: apk add --update curl
  #     - run:
  #         name: smoke test
  #         command: |
  #           URL="https://blog.udacity.com/"
  #           # Test if website exists
  #           if curl -s --head ${URL} 
  #           then
  #             return 0
  #           else
  #             return 1
  #           fi


#  Creating a Rollback infrastructure that intentionally the stack fails
  create_rollback_infrastructure: 
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Create Cloudformation Stack
          command: |
            aws cloudformation deploy \
            --template-file template.yml \
            --stack-name myStack-${CIRCLE_WORKFLOW_ID:0:7} \
            --region us-east-1

# Creatin a Smoke Test Job that intentionally fails to stimulate an error and get the created stack deleted
  smoke_rollback_test:
    docker:
    - image: alpine:latest
    steps:
      - run: 
          name: Test job
          command: |
            return 1
      - destroy_enviroments
        when: on_fail     
      # - run:
      #     name: Test job
      #  # Fail the job intentionally to simulate an error.
      #     command: |
      #       return 1
      # - destroy_environments # once the smoke_rollback_test job fails it runs this reference command to get the stack deleted
      #   when: on_fail       

  
workflows:
  my_workflow:
      jobs:
       # - create_infrastructure
       # - configure_infrastructure 
       # - smoke_test
         - create_rollback_infrastructure
         - smoke_rollback_test
                